/**
 * @fileoverview Monitor Cont√≠nuo do Sistema
 * @description Monitora sa√∫de e performance do sistema em tempo real
 * @author Sistema de Loja de T√™nis
 * @version 1.0
 */

// Carregar vari√°veis de ambiente
require('dotenv').config();

const conexao = require('./banco/conexao');
const notificacaoService = require('./services/notificacaoService');
const fs = require('fs').promises;

class MonitorSistema {
    constructor() {
        this.intervaloMonitoramento = 30000; // 30 segundos
        this.intervalos = {
            saude: null,
            performance: null,
            logs: null
        };
        this.metricas = {
            ultimaVerificacao: null,
            status: 'iniciando',
            erros: 0,
            sucessos: 0,
            tempoResposta: []
        };
    }

    /**
     * Iniciar monitoramento
     */
    async iniciar() {
        console.log('üîç ===== MONITOR DO SISTEMA INICIADO =====');
        console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
        console.log(`‚è±Ô∏è Intervalo: ${this.intervaloMonitoramento / 1000}s`);
        
        // Verifica√ß√£o inicial
        await this.verificacaoCompleta();
        
        // Agendar verifica√ß√µes peri√≥dicas
        this.intervalos.saude = setInterval(() => {
            this.verificarSaudeBasica();
        }, this.intervaloMonitoramento);
        
        this.intervalos.performance = setInterval(() => {
            this.verificarPerformance();
        }, this.intervaloMonitoramento * 2); // A cada 60s
        
        this.intervalos.logs = setInterval(() => {
            this.gerarRelatorioStatus();
        }, this.intervaloMonitoramento * 10); // A cada 5 minutos
        
        console.log('‚úÖ Monitor ativo e rodando em segundo plano...');
        console.log('üìä Relat√≥rios ser√£o gerados a cada 5 minutos');
        console.log('üõë Use Ctrl+C para parar o monitor');
    }

    /**
     * Verifica√ß√£o completa inicial
     */
    async verificacaoCompleta() {
        console.log('\nüß™ Executando verifica√ß√£o completa inicial...');
        
        try {
            const inicioTeste = Date.now();
            
            // Testar conex√£o com banco
            await this.testarConexaoBanco();
            
            // Testar servi√ßos principais
            await this.testarServicos();
            
            // Testar tabelas cr√≠ticas
            await this.testarTabelasCriticas();
            
            // Testar sistema de notifica√ß√µes
            await this.testarNotificacoes();
            
            const tempoTotal = Date.now() - inicioTeste;
            
            this.metricas.ultimaVerificacao = new Date();
            this.metricas.status = 'saudavel';
            this.metricas.sucessos++;
            this.metricas.tempoResposta.push(tempoTotal);
            
            console.log(`‚úÖ Verifica√ß√£o completa: ${tempoTotal}ms`);
            
        } catch (error) {
            this.metricas.erros++;
            this.metricas.status = 'erro';
            console.error('‚ùå Erro na verifica√ß√£o completa:', error.message);
            
            // Enviar alerta cr√≠tico
            await this.enviarAlertaCritico(error);
        }
    }

    /**
     * Verificar sa√∫de b√°sica do sistema
     */
    async verificarSaudeBasica() {
        try {
            const inicio = Date.now();
            
            // Teste b√°sico de conex√£o
            await conexao.executarConsulta('SELECT 1 as status');
            
            const tempo = Date.now() - inicio;
            this.metricas.tempoResposta.push(tempo);
            
            // Manter apenas √∫ltimas 50 medi√ß√µes
            if (this.metricas.tempoResposta.length > 50) {
                this.metricas.tempoResposta = this.metricas.tempoResposta.slice(-50);
            }
            
            this.metricas.ultimaVerificacao = new Date();
            this.metricas.sucessos++;
            
            if (this.metricas.status !== 'saudavel') {
                this.metricas.status = 'saudavel';
                console.log(`‚úÖ ${new Date().toLocaleTimeString()} - Sistema voltou ao normal`);
            }
            
        } catch (error) {
            this.metricas.erros++;
            this.metricas.status = 'erro';
            console.error(`‚ùå ${new Date().toLocaleTimeString()} - Erro na verifica√ß√£o:`, error.message);
        }
    }

    /**
     * Verificar performance do sistema
     */
    async verificarPerformance() {
        try {
            const testes = [];
            
            // Teste de consulta complexa
            const inicioComplexo = Date.now();
            await conexao.executarConsulta(`
                SELECT COUNT(*) as total_pedidos,
                       AVG(valor_total) as ticket_medio,
                       COUNT(DISTINCT usuario_id) as usuarios_unicos
                FROM pedidos 
                WHERE data_pedido >= DATE_SUB(NOW(), INTERVAL 30 DAY)
            `);
            testes.push({ tipo: 'consulta_complexa', tempo: Date.now() - inicioComplexo });
            
            // Teste de inser√ß√£o
            const inicioInsert = Date.now();
            await conexao.executarConsulta(`
                INSERT INTO eventos_log (tipo_evento, dados, created_at) 
                VALUES ('monitor_performance', '{"teste": true}', NOW())
            `);
            testes.push({ tipo: 'insert', tempo: Date.now() - inicioInsert });
            
            // An√°lise de performance
            const tempoMedio = this.metricas.tempoResposta.length > 0 
                ? this.metricas.tempoResposta.reduce((a, b) => a + b, 0) / this.metricas.tempoResposta.length 
                : 0;
            
            if (tempoMedio > 1000) {
                console.warn(`‚ö†Ô∏è ${new Date().toLocaleTimeString()} - Performance degradada: ${tempoMedio.toFixed(0)}ms`);
            }
            
        } catch (error) {
            console.error(`‚ùå ${new Date().toLocaleTimeString()} - Erro na verifica√ß√£o de performance:`, error.message);
        }
    }

    /**
     * Testar conex√£o com banco de dados
     */
    async testarConexaoBanco() {
        const resultado = await conexao.executarConsulta('SELECT VERSION() as versao');
        
        if (resultado.length === 0) {
            throw new Error('Falha na conex√£o com MySQL');
        }
        
        return true;
    }

    /**
     * Testar servi√ßos principais
     */
    async testarServicos() {
        // Testar se servi√ßos s√£o carreg√°veis
        const statusPedidoService = require('./services/statusPedidoService');
        const pagamentoService = require('./services/pagamentoService');
        
        if (!statusPedidoService || !pagamentoService) {
            throw new Error('Falha ao carregar servi√ßos principais');
        }
        
        return true;
    }

    /**
     * Testar tabelas cr√≠ticas
     */
    async testarTabelasCriticas() {
        const tabelas = [
            'usuarios', 'pedidos', 'produtos', 'pagamentos',
            'notificacoes_log', 'historico_status_pedidos'
        ];
        
        for (const tabela of tabelas) {
            try {
                await conexao.executarConsulta(`SELECT COUNT(*) as total FROM ${tabela} LIMIT 1`);
            } catch (error) {
                throw new Error(`Falha na tabela ${tabela}: ${error.message}`);
            }
        }
        
        return true;
    }

    /**
     * Testar sistema de notifica√ß√µes
     */
    async testarNotificacoes() {
        try {
            // Verificar se templates est√£o carregados
            const templates = await conexao.executarConsulta(`
                SELECT COUNT(*) as total FROM notificacoes_templates
            `);
            
            if (templates[0].total === 0) {
                throw new Error('Nenhum template de notifica√ß√£o encontrado');
            }
            
            return true;
            
        } catch (error) {
            throw new Error(`Falha no sistema de notifica√ß√µes: ${error.message}`);
        }
    }

    /**
     * Gerar relat√≥rio de status
     */
    async gerarRelatorioStatus() {
        try {
            const agora = new Date();
            const tempoMedio = this.metricas.tempoResposta.length > 0 
                ? this.metricas.tempoResposta.reduce((a, b) => a + b, 0) / this.metricas.tempoResposta.length 
                : 0;
            
            const relatorio = `
üìä RELAT√ìRIO DE MONITORAMENTO - ${agora.toLocaleString('pt-BR')}
================================================================

üîç STATUS GERAL: ${this.metricas.status.toUpperCase()}
‚è∞ √öltima verifica√ß√£o: ${this.metricas.ultimaVerificacao?.toLocaleTimeString() || 'N/A'}
‚úÖ Sucessos: ${this.metricas.sucessos}
‚ùå Erros: ${this.metricas.erros}
üìà Taxa de sucesso: ${((this.metricas.sucessos / (this.metricas.sucessos + this.metricas.erros)) * 100).toFixed(1)}%

‚ö° PERFORMANCE:
- Tempo m√©dio de resposta: ${tempoMedio.toFixed(0)}ms
- √öltima medi√ß√£o: ${this.metricas.tempoResposta[this.metricas.tempoResposta.length - 1] || 0}ms
- Total de medi√ß√µes: ${this.metricas.tempoResposta.length}

üóÑÔ∏è BANCO DE DADOS:
- Conex√£o: ${this.metricas.status === 'saudavel' ? '‚úÖ Est√°vel' : '‚ùå Inst√°vel'}
- Performance: ${tempoMedio < 100 ? 'üü¢ Excelente' : tempoMedio < 500 ? 'üü° Boa' : 'üî¥ Degradada'}

üìß NOTIFICA√á√ïES:
- Sistema: ${this.metricas.status === 'saudavel' ? '‚úÖ Operacional' : '‚ùå Com problemas'}
- Templates: Carregados
- Logs: Ativos

================================================================
`;
            
            console.log(relatorio);
            
            // Salvar relat√≥rio em arquivo
            await this.salvarRelatorio(relatorio);
            
            // Verificar se precisa enviar alerta
            const taxaSucesso = (this.metricas.sucessos / (this.metricas.sucessos + this.metricas.erros)) * 100;
            
            if (taxaSucesso < 95 && this.metricas.sucessos + this.metricas.erros > 10) {
                await this.enviarAlertaPerformance(taxaSucesso, tempoMedio);
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar relat√≥rio:', error.message);
        }
    }

    /**
     * Salvar relat√≥rio em arquivo
     */
    async salvarRelatorio(relatorio) {
        try {
            const arquivo = `logs/monitor_${new Date().toISOString().split('T')[0]}.log`;
            await fs.appendFile(arquivo, relatorio + '\n', 'utf8');
        } catch (error) {
            // Ignorar erro de salvamento de log
        }
    }

    /**
     * Enviar alerta cr√≠tico
     */
    async enviarAlertaCritico(erro) {
        try {
            console.log('üö® ENVIANDO ALERTA CR√çTICO...');
            
            // Log do alerta
            const alertaLog = {
                tipo: 'alerta_critico',
                timestamp: new Date().toISOString(),
                erro: erro.message,
                stack: erro.stack,
                metricas: this.metricas
            };
            
            console.log('üö® ALERTA CR√çTICO:', JSON.stringify(alertaLog, null, 2));
            
        } catch (error) {
            console.error('‚ùå Falha ao enviar alerta cr√≠tico:', error.message);
        }
    }

    /**
     * Enviar alerta de performance
     */
    async enviarAlertaPerformance(taxaSucesso, tempoMedio) {
        try {
            console.log(`‚ö†Ô∏è ALERTA DE PERFORMANCE: Taxa de sucesso ${taxaSucesso.toFixed(1)}%, Tempo m√©dio ${tempoMedio.toFixed(0)}ms`);
        } catch (error) {
            console.error('‚ùå Falha ao enviar alerta de performance:', error.message);
        }
    }

    /**
     * Parar monitoramento
     */
    parar() {
        console.log('\nüõë Parando monitor do sistema...');
        
        Object.values(this.intervalos).forEach(intervalo => {
            if (intervalo) {
                clearInterval(intervalo);
            }
        });
        
        console.log('‚úÖ Monitor parado com sucesso!');
        console.log(`üìä Estat√≠sticas finais:`);
        console.log(`   - Sucessos: ${this.metricas.sucessos}`);
        console.log(`   - Erros: ${this.metricas.erros}`);
        console.log(`   - Taxa de sucesso: ${((this.metricas.sucessos / (this.metricas.sucessos + this.metricas.erros)) * 100).toFixed(1)}%`);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const monitor = new MonitorSistema();
    
    // Capturar Ctrl+C para parar graciosamente
    process.on('SIGINT', () => {
        monitor.parar();
        process.exit(0);
    });
    
    // Iniciar monitoramento
    monitor.iniciar()
        .catch((error) => {
            console.error('‚ùå Erro fatal no monitor:', error);
            process.exit(1);
        });
}

module.exports = MonitorSistema;
