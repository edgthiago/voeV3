// Script de corre√ß√£o de inconsist√™ncias - VoeV3
const conexao = require('./banco/conexao');

async function corrigirInconsistenciasCompletas() {
  try {
    console.log('üöÄ INICIANDO CORRE√á√ÉO COMPLETA DE INCONSIST√äNCIAS...\n');
    
    // 1. Verificar inconsist√™ncias antes da corre√ß√£o
    console.log('üìä VERIFICANDO INCONSIST√äNCIAS ANTES DA CORRE√á√ÉO:');
    const antesCorrecao = await conexao.executarConsulta(`
      SELECT id, nome, email, tipo_usuario, tipo 
      FROM usuarios 
      WHERE tipo_usuario != tipo OR tipo IS NULL 
      ORDER BY id LIMIT 10
    `);
    
    console.log(`Encontradas ${antesCorrecao.length} inconsist√™ncias:`);
    antesCorrecao.forEach(u => {
      console.log(`  ID: ${u.id} | ${u.nome} | tipo_usuario: ${u.tipo_usuario} | tipo: ${u.tipo}`);
    });
    
    // 2. Corrigir todas as inconsist√™ncias
    console.log('\nüîÑ EXECUTANDO CORRE√á√ÉO...');
    const resultado = await conexao.executarConsulta(`
      UPDATE usuarios 
      SET tipo = tipo_usuario 
      WHERE tipo != tipo_usuario OR tipo IS NULL
    `);
    
    console.log(`‚úÖ ${resultado.affectedRows} registros corrigidos com sucesso!`);
    
    // 3. Verificar se ainda h√° inconsist√™ncias
    console.log('\nüîç VERIFICANDO AP√ìS CORRE√á√ÉO:');
    const aposCorrecao = await conexao.executarConsulta(`
      SELECT COUNT(*) as total 
      FROM usuarios 
      WHERE tipo_usuario != tipo OR tipo IS NULL
    `);
    
    console.log(`Inconsist√™ncias restantes: ${aposCorrecao[0].total}`);
    
    // 4. Verificar Thiago Costa especificamente
    console.log('\nüë§ VERIFICANDO THIAGO COSTA:');
    const thiago = await conexao.executarConsulta(`
      SELECT id, nome, email, tipo_usuario, tipo, status
      FROM usuarios 
      WHERE email = ?
    `, ['thiagoeucosta@gmail.com']);
    
    if (thiago.length > 0) {
      const t = thiago[0];
      console.log(`‚úÖ ID: ${t.id} | ${t.nome}`);
      console.log(`‚úÖ Email: ${t.email}`);
      console.log(`‚úÖ tipo_usuario: ${t.tipo_usuario}`);
      console.log(`‚úÖ tipo: ${t.tipo}`);
      console.log(`‚úÖ Status: ${t.status}`);
      console.log(t.tipo_usuario === t.tipo ? '‚úÖ CONSISTENTE!' : '‚ùå AINDA INCONSISTENTE');
    }
    
    // 5. Verificar distribui√ß√£o por tipo ap√≥s corre√ß√£o
    console.log('\nüìä DISTRIBUI√á√ÉO POR TIPO AP√ìS CORRE√á√ÉO:');
    const distribuicao = await conexao.executarConsulta(`
      SELECT tipo_usuario, COUNT(*) as total 
      FROM usuarios 
      GROUP BY tipo_usuario 
      ORDER BY total DESC
    `);
    
    distribuicao.forEach(d => {
      console.log(`  ${d.tipo_usuario}: ${d.total} usu√°rios`);
    });
    
    console.log('\nüéØ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!');
    
  } catch (erro) {
    console.error('‚ùå ERRO NA CORRE√á√ÉO:', erro.message);
    throw erro;
  }
}

// Executar corre√ß√£o
corrigirInconsistenciasCompletas()
  .then(() => {
    console.log('\n‚úÖ SCRIPT EXECUTADO COM SUCESSO!');
    process.exit(0);
  })
  .catch((erro) => {
    console.error('\n‚ùå FALHA NO SCRIPT:', erro.message);
    process.exit(1);
  });
