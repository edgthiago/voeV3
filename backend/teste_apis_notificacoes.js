/**
 * @fileoverview Teste dos endpoints de notifica√ß√µes
 * @description Testa todas as rotas da API de notifica√ß√µes
 * @author Sistema de Loja de T√™nis
 * @version 1.0
 */

const axios = require('axios');

const BASE_URL = 'http://127.0.0.1:3000/api';

class TesteAPIsNotificacoes {
    constructor() {
        console.log('üß™ Testando APIs do sistema de notifica√ß√µes...\n');
    }

    /**
     * Testar endpoint de health da API
     */
    async testarHealth() {
        try {
            console.log('üîç Testando health da API...');
            const response = await axios.get(`${BASE_URL}/health`);
            console.log('‚úÖ API est√° funcionando:', response.data);
            return true;
        } catch (error) {
            console.error('‚ùå Erro no health da API:', error.message);
            return false;
        }
    }

    /**
     * Testar configura√ß√£o de notifica√ß√µes de usu√°rio
     */
    async testarConfiguracaoUsuario() {
        try {
            console.log('\nüîç Testando configura√ß√£o de notifica√ß√µes...');
            
            // Buscar configura√ß√µes atuais
            const configResponse = await axios.get(`${BASE_URL}/notificacoes/configuracao/1`);
            console.log('üì± Configura√ß√£o atual:', configResponse.data);

            // Atualizar configura√ß√µes
            const updateData = {
                notificacoes_email: true,
                notificacoes_sms: false,
                notificacoes_push: true
            };
            
            const updateResponse = await axios.put(`${BASE_URL}/notificacoes/configuracao/1`, updateData);
            console.log('‚úÖ Configura√ß√£o atualizada:', updateResponse.data);
            
            return true;
        } catch (error) {
            console.error('‚ùå Erro na configura√ß√£o:', error.response?.data || error.message);
            return false;
        }
    }

    /**
     * Testar hist√≥rico de notifica√ß√µes
     */
    async testarHistorico() {
        try {
            console.log('\nüîç Testando hist√≥rico de notifica√ß√µes...');
            
            const response = await axios.get(`${BASE_URL}/notificacoes/historico/1?limite=5`);
            console.log('üìã Hist√≥rico:', response.data);
            
            return true;
        } catch (error) {
            console.error('‚ùå Erro no hist√≥rico:', error.response?.data || error.message);
            return false;
        }
    }

    /**
     * Testar estat√≠sticas
     */
    async testarEstatisticas() {
        try {
            console.log('\nüîç Testando estat√≠sticas...');
            
            const response = await axios.get(`${BASE_URL}/notificacoes/estatisticas`);
            console.log('üìä Estat√≠sticas:', response.data);
            
            return true;
        } catch (error) {
            console.error('‚ùå Erro nas estat√≠sticas:', error.response?.data || error.message);
            return false;
        }
    }

    /**
     * Testar envio de notifica√ß√£o teste
     */
    async testarEnvioTeste() {
        try {
            console.log('\nüîç Testando envio de notifica√ß√£o teste...');
            
            const testData = {
                usuario_id: 1,
                tipo: 'email',
                assunto: 'Teste de Notifica√ß√£o',
                mensagem: 'Esta √© uma notifica√ß√£o de teste do sistema.'
            };
            
            const response = await axios.post(`${BASE_URL}/notificacoes/teste`, testData);
            console.log('üìß Teste enviado:', response.data);
            
            return true;
        } catch (error) {
            console.error('‚ùå Erro no teste de envio:', error.response?.data || error.message);
            return false;
        }
    }

    /**
     * Executar todos os testes
     */
    async executarTodos() {
        try {
            let sucessos = 0;
            let total = 0;

            // Testar health
            total++;
            if (await this.testarHealth()) sucessos++;

            // Aguardar um pouco entre os testes
            await new Promise(resolve => setTimeout(resolve, 500));

            // Testar configura√ß√£o
            total++;
            if (await this.testarConfiguracaoUsuario()) sucessos++;

            await new Promise(resolve => setTimeout(resolve, 500));

            // Testar hist√≥rico
            total++;
            if (await this.testarHistorico()) sucessos++;

            await new Promise(resolve => setTimeout(resolve, 500));

            // Testar estat√≠sticas
            total++;
            if (await this.testarEstatisticas()) sucessos++;

            await new Promise(resolve => setTimeout(resolve, 500));

            // Testar envio
            total++;
            if (await this.testarEnvioTeste()) sucessos++;

            // Relat√≥rio final
            console.log(`\nüìä Relat√≥rio dos testes:`);
            console.log(`‚úÖ Sucessos: ${sucessos}/${total}`);
            console.log(`‚ùå Falhas: ${total - sucessos}/${total}`);
            console.log(`üìà Taxa de sucesso: ${((sucessos/total)*100).toFixed(1)}%`);

            if (sucessos === total) {
                console.log('\nüéâ Todos os testes passaram! APIs funcionando corretamente.');
            } else {
                console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique a configura√ß√£o.');
            }

        } catch (error) {
            console.error('‚ùå Erro geral nos testes:', error.message);
        }
    }
}

// Executar testes
(async () => {
    const teste = new TesteAPIsNotificacoes();
    await teste.executarTodos();
    console.log('\n‚ú® Testes conclu√≠dos!');
})();
