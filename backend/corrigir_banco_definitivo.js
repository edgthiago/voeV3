const mysql = require('mysql2/promise');
require('dotenv').config();

async function corrigirBancoDefinitivamente() {
  let conexao;
  
  try {
    console.log('üîß CORRE√á√ÉO DEFINITIVA DO BANCO DE DADOS');
    console.log('=' .repeat(60));
    
    // Conectar ao banco
    conexao = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: 'projetofgt'
    });
    
    console.log('‚úÖ Conectado ao banco projetofgt');
    
    // 1. Corrigir valor padr√£o da imagem na tabela produtos
    console.log('\nüì∏ Corrigindo valor padr√£o da imagem...');
    await conexao.execute(`
      ALTER TABLE produtos 
      ALTER COLUMN imagem SET DEFAULT '/img/papelaria_produtos.png'
    `);
    console.log('‚úÖ Valor padr√£o da imagem corrigido');
    
    // 2. Atualizar produtos que ainda t√™m imagem de t√™nis
    console.log('\nüñºÔ∏è  Atualizando imagens de produtos...');
    const [resultadoImagens] = await conexao.execute(`
      UPDATE produtos 
      SET imagem = '/img/papelaria_produtos.png' 
      WHERE imagem LIKE '%tenis%' OR imagem = '/tenis_produtos.png'
    `);
    console.log(`‚úÖ ${resultadoImagens.affectedRows} imagens atualizadas`);
    
    // 3. Verificar se precisamos remover colunas da tabela carrinho
    console.log('\nüõí Analisando tabela carrinho...');
    
    // Verificar se as colunas tamanho e cor t√™m dados importantes
    const [dadosCarrinho] = await conexao.execute(`
      SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN tamanho IS NOT NULL AND tamanho != '' THEN 1 END) as com_tamanho,
        COUNT(CASE WHEN cor IS NOT NULL AND cor != '' THEN 1 END) as com_cor
      FROM carrinho
    `);
    
    console.log(`Total de itens no carrinho: ${dadosCarrinho[0].total}`);
    console.log(`Itens com tamanho: ${dadosCarrinho[0].com_tamanho}`);
    console.log(`Itens com cor: ${dadosCarrinho[0].com_cor}`);
    
    // Se h√° poucos dados nessas colunas, vamos limp√°-las
    if (dadosCarrinho[0].com_tamanho < 5 && dadosCarrinho[0].com_cor < 5) {
      console.log('\nüßπ Limpando campos tamanho e cor do carrinho...');
      await conexao.execute(`UPDATE carrinho SET tamanho = NULL, cor = NULL`);
      console.log('‚úÖ Campos tamanho e cor limpos');
      
      // Opcional: Remover as colunas (comentado por seguran√ßa)
      // console.log('üóëÔ∏è  Removendo colunas tamanho e cor...');
      // await conexao.execute(`ALTER TABLE carrinho DROP COLUMN tamanho`);
      // await conexao.execute(`ALTER TABLE carrinho DROP COLUMN cor`);
      // console.log('‚úÖ Colunas removidas');
    }
    
    // 4. Verificar e corrigir descri√ß√µes que possam ter refer√™ncias a t√™nis
    console.log('\nüìù Verificando descri√ß√µes...');
    const [descricoesTenis] = await conexao.execute(`
      SELECT id, nome, descricao 
      FROM produtos 
      WHERE descricao LIKE '%t√™nis%' OR descricao LIKE '%tenis%'
      LIMIT 5
    `);
    
    if (descricoesTenis.length > 0) {
      console.log(`‚ùå Encontradas ${descricoesTenis.length} descri√ß√µes com refer√™ncias a t√™nis:`);
      for (const produto of descricoesTenis) {
        console.log(`  ID ${produto.id}: ${produto.nome}`);
        console.log(`    Descri√ß√£o: ${produto.descricao?.substring(0, 100)}...`);
      }
      
      // Aqui podemos implementar corre√ß√µes espec√≠ficas se necess√°rio
      console.log('‚ö†Ô∏è  Estas descri√ß√µes precisam ser corrigidas manualmente');
    } else {
      console.log('‚úÖ Nenhuma descri√ß√£o com refer√™ncias a t√™nis encontrada');
    }
    
    // 5. Verificar status final
    console.log('\nüìä STATUS FINAL DO BANCO:');
    console.log('-'.repeat(40));
    
    const [statusProdutos] = await conexao.execute(`
      SELECT 
        COUNT(*) as total_produtos,
        COUNT(CASE WHEN imagem LIKE '%tenis%' THEN 1 END) as imagens_tenis,
        COUNT(CASE WHEN nome LIKE '%t√™nis%' OR nome LIKE '%tenis%' THEN 1 END) as nomes_tenis,
        COUNT(CASE WHEN categoria LIKE '%t√™nis%' OR categoria LIKE '%tenis%' THEN 1 END) as categorias_tenis
      FROM produtos
    `);
    
    const status = statusProdutos[0];
    console.log(`Total de produtos: ${status.total_produtos}`);
    console.log(`Imagens com refer√™ncia a t√™nis: ${status.imagens_tenis}`);
    console.log(`Nomes com refer√™ncia a t√™nis: ${status.nomes_tenis}`);
    console.log(`Categorias com refer√™ncia a t√™nis: ${status.categorias_tenis}`);
    
    if (status.imagens_tenis === 0 && status.nomes_tenis === 0 && status.categorias_tenis === 0) {
      console.log('\nüéâ MIGRA√á√ÉO COMPLETA! Banco 100% limpo de refer√™ncias a t√™nis');
    } else {
      console.log('\n‚ö†Ô∏è  Ainda existem algumas refer√™ncias a t√™nis que precisam ser corrigidas');
    }
    
    // 6. Verificar algumas amostras finais
    console.log('\nüìã AMOSTRA FINAL DE PRODUTOS:');
    console.log('-'.repeat(40));
    
    const [amostraFinal] = await conexao.execute(`
      SELECT id, nome, marca, categoria, imagem 
      FROM produtos 
      ORDER BY id 
      LIMIT 5
    `);
    
    for (const produto of amostraFinal) {
      console.log(`ID ${produto.id}: ${produto.nome}`);
      console.log(`  Marca: ${produto.marca} | Categoria: ${produto.categoria}`);
      console.log(`  Imagem: ${produto.imagem}`);
      console.log('');
    }
    
    console.log('‚úÖ CORRE√á√ÉO CONCLU√çDA!');
    
  } catch (erro) {
    console.error('‚ùå Erro durante corre√ß√£o:', erro.message);
    console.error('Stack:', erro.stack);
  } finally {
    if (conexao) {
      await conexao.end();
      console.log('\nüîí Conex√£o fechada');
    }
  }
}

// Executar corre√ß√£o
corrigirBancoDefinitivamente();
