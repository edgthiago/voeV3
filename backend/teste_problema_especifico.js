// Teste espec√≠fico: simular exatamente o problema relatado pelo usu√°rio
const axios = require('axios').default;
const mysql = require('mysql2/promise');
require('dotenv').config();

async function testarProblemaEspecifico() {
  try {
    console.log('üéØ TESTE ESPEC√çFICO: Problema de persist√™ncia ap√≥s F5\n');

    // Conectar ao banco
    const conexao = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 3306,
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '1234',
      database: process.env.DB_NAME || 'projetofgt'
    });

    console.log('1Ô∏è‚É£ Simulando cen√°rio: produto com estoque inicial "2"...');
    await conexao.execute('UPDATE produtos SET quantidade_estoque = 2 WHERE id = 1');
    
    // Verificar API
    let response = await axios.get('http://localhost:30011/api/produtos/1');
    console.log(`   ‚úÖ API confirma estoque: ${response.data.dados.produto.estoque}`);

    console.log('\n2Ô∏è‚É£ Simulando atualiza√ß√£o via frontend para estoque "10"...');
    await conexao.execute('UPDATE produtos SET quantidade_estoque = 10 WHERE id = 1');
    
    // Verificar API imediatamente
    response = await axios.get('http://localhost:30011/api/produtos/1');
    console.log(`   ‚úÖ API ap√≥s atualiza√ß√£o: ${response.data.dados.produto.estoque}`);

    console.log('\n3Ô∏è‚É£ Simulando F5 do usu√°rio (m√∫ltiplas requisi√ß√µes com cache busting)...');
    
    for (let i = 1; i <= 5; i++) {
      const timestamp = Date.now() + i;
      const random = Math.random().toString(36).substring(7);
      
      // Simular requisi√ß√£o que o frontend faz
      response = await axios.get(`http://localhost:30011/api/produtos?_t=${timestamp}&_r=${random}&_bust=true`);
      const produto = response.data.dados.find(p => p.id === 1);
      
      console.log(`   F5 #${i}: estoque = ${produto.estoque}`);
      
      // Pequena pausa entre requisi√ß√µes
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n4Ô∏è‚É£ Verificando estado final no banco...');
    const [rows] = await conexao.execute('SELECT quantidade_estoque FROM produtos WHERE id = 1');
    console.log(`   üíæ Banco de dados: ${rows[0].quantidade_estoque}`);

    await conexao.end();

    console.log('\n5Ô∏è‚É£ Teste de consist√™ncia final...');
    response = await axios.get(`http://localhost:30011/api/produtos/1?_final=${Date.now()}`);
    const estoqueAPI = response.data.dados.produto.estoque;
    
    response = await axios.get(`http://localhost:30011/api/produtos?_final=${Date.now()}`);
    const estoqueLista = response.data.dados.find(p => p.id === 1).estoque;

    console.log(`   üîç API individual: ${estoqueAPI}`);
    console.log(`   üìã API listagem: ${estoqueLista}`);
    console.log(`   üíæ Banco: ${rows[0].quantidade_estoque}`);

    if (estoqueAPI === 10 && estoqueLista === 10 && rows[0].quantidade_estoque === 10) {
      console.log('\n‚úÖ RESULTADO: Tudo funcionando corretamente!');
      console.log('   O valor 10 persiste em todas as fontes.');
      console.log('   Se voc√™ ainda v√™ "2" no frontend, pode ser cache do navegador.');
    } else {
      console.log('\n‚ùå PROBLEMA CONFIRMADO: Inconsist√™ncias detectadas!');
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testarProblemaEspecifico();
