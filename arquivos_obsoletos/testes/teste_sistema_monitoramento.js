/**
 * üß™ TESTE DO SISTEMA DE MONITORAMENTO
 * Data: 07 de Julho de 2025
 * Objetivo: Validar todas as funcionalidades do sistema de monitoramento
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

// Fun√ß√£o para executar testes
async function testarSistemaMonitoramento() {
    console.log('üîç ===== TESTE DO SISTEMA DE MONITORAMENTO =====');
    console.log('üìÖ Data:', new Date().toLocaleString('pt-BR'));
    console.log('');

    let testesPassaram = 0;
    let totalTestes = 0;

    try {
        // Teste 1: Importar servi√ßo de monitoramento
        console.log('üîß Teste 1: Importar servi√ßo de monitoramento');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            console.log('   ‚úÖ Servi√ßo de monitoramento importado com sucesso');
            testesPassaram++;
        } catch (error) {
            console.log('   ‚ùå Erro ao importar servi√ßo:', error.message);
        }

        // Teste 2: Verificar inicializa√ß√£o
        console.log('üöÄ Teste 2: Verificar inicializa√ß√£o do servi√ßo');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const status = monitoringService.getMonitoringStatus();
            
            if (status && typeof status === 'object') {
                console.log('   ‚úÖ Servi√ßo inicializado corretamente');
                console.log('   üìä Status:', status.isMonitoring ? 'Ativo' : 'Inativo');
                console.log('   ‚è±Ô∏è Interval:', status.interval, 'ms');
                testesPassaram++;
            } else {
                console.log('   ‚ùå Status inv√°lido');
            }
        } catch (error) {
            console.log('   ‚ùå Erro na inicializa√ß√£o:', error.message);
        }

        // Teste 3: Iniciar monitoramento
        console.log('‚ñ∂Ô∏è Teste 3: Iniciar monitoramento');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const result = monitoringService.startMonitoring();
            
            if (result && result.success) {
                console.log('   ‚úÖ Monitoramento iniciado com sucesso');
                console.log('   üìã Resultado:', result.message);
                testesPassaram++;
            } else {
                console.log('   ‚ùå Falha ao iniciar monitoramento');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao iniciar monitoramento:', error.message);
        }

        // Teste 4: Coletar m√©tricas
        console.log('üìà Teste 4: Coletar m√©tricas do sistema');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            await monitoringService.collectMetrics();
            
            console.log('   ‚úÖ M√©tricas coletadas com sucesso');
            testesPassaram++;
        } catch (error) {
            console.log('   ‚ùå Erro ao coletar m√©tricas:', error.message);
        }

        // Teste 5: Obter m√©tricas atuais
        console.log('üìä Teste 5: Obter m√©tricas atuais');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const metrics = monitoringService.getCurrentMetrics();
            
            if (metrics && metrics.timestamp) {
                console.log('   ‚úÖ M√©tricas obtidas com sucesso');
                console.log('   üñ•Ô∏è CPU:', metrics.system?.cpu || 0, '%');
                console.log('   üíæ Mem√≥ria:', metrics.system?.memory?.usage || 0, '%');
                console.log('   üíø Disco:', metrics.system?.disk?.usage || 0, '%');
                console.log('   üóÑÔ∏è DB Conex√µes:', metrics.database?.connections || 0);
                console.log('   ‚è±Ô∏è Tempo Resposta:', Math.round(metrics.performance?.averageResponseTime || 0), 'ms');
                testesPassaram++;
            } else {
                console.log('   ‚ùå M√©tricas inv√°lidas');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao obter m√©tricas:', error.message);
        }

        // Teste 6: Verificar alertas
        console.log('üö® Teste 6: Verificar sistema de alertas');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const metrics = monitoringService.getCurrentMetrics();
            const alerts = metrics.alerts || [];
            
            console.log('   ‚úÖ Sistema de alertas verificado');
            console.log('   üì¢ Alertas ativos:', alerts.length);
            
            if (alerts.length > 0) {
                console.log('   üö® Tipos de alertas:');
                alerts.forEach(alert => {
                    console.log(`      - ${alert.type}: ${alert.message}`);
                });
            } else {
                console.log('   ‚úÖ Nenhum alerta ativo');
            }
            
            testesPassaram++;
        } catch (error) {
            console.log('   ‚ùå Erro ao verificar alertas:', error.message);
        }

        // Teste 7: Verifica√ß√£o de sa√∫de
        console.log('üè• Teste 7: Verifica√ß√£o de sa√∫de do sistema');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const health = await monitoringService.healthCheck();
            
            if (health && health.status) {
                console.log('   ‚úÖ Verifica√ß√£o de sa√∫de realizada');
                console.log('   üè• Status:', health.status);
                console.log('   üóÑÔ∏è Banco:', health.services?.database || 'unknown');
                console.log('   üì± Aplica√ß√£o:', health.services?.application || 'unknown');
                console.log('   üíæ Sistema de arquivos:', health.services?.filesystem || 'unknown');
                testesPassaram++;
            } else {
                console.log('   ‚ùå Verifica√ß√£o de sa√∫de falhou');
            }
        } catch (error) {
            console.log('   ‚ùå Erro na verifica√ß√£o de sa√∫de:', error.message);
        }

        // Teste 8: Verificar rotas de monitoramento
        console.log('üõ£Ô∏è Teste 8: Verificar rotas de monitoramento');
        totalTestes++;
        
        try {
            const monitoringRoutes = require('./rotas/monitoring');
            
            if (monitoringRoutes) {
                console.log('   ‚úÖ Rotas de monitoramento carregadas');
                console.log('   üìù Endpoints dispon√≠veis:');
                console.log('      GET /api/monitoring/status');
                console.log('      GET /api/monitoring/metrics');
                console.log('      GET /api/monitoring/metrics/history');
                console.log('      POST /api/monitoring/start');
                console.log('      POST /api/monitoring/stop');
                console.log('      GET /api/monitoring/alerts');
                console.log('      GET /api/monitoring/health');
                console.log('      POST /api/monitoring/thresholds');
                console.log('      GET /api/monitoring/reports/daily');
                console.log('      GET /api/monitoring/dashboard');
                console.log('      POST /api/monitoring/collect');
                testesPassaram++;
            } else {
                console.log('   ‚ùå Falha ao carregar rotas');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao verificar rotas:', error.message);
        }

        // Teste 9: Verificar diret√≥rios de m√©tricas
        console.log('üìÅ Teste 9: Verificar estrutura de diret√≥rios');
        totalTestes++;
        
        try {
            const metricsDir = path.join(__dirname, 'metrics');
            const reportsDir = path.join(__dirname, 'reports');
            
            // Criar diret√≥rios se n√£o existirem
            if (!fs.existsSync(metricsDir)) {
                fs.mkdirSync(metricsDir, { recursive: true });
            }
            
            if (!fs.existsSync(reportsDir)) {
                fs.mkdirSync(reportsDir, { recursive: true });
            }
            
            console.log('   ‚úÖ Diret√≥rios verificados/criados');
            console.log('   üìä M√©tricas:', metricsDir);
            console.log('   üìã Relat√≥rios:', reportsDir);
            testesPassaram++;
        } catch (error) {
            console.log('   ‚ùå Erro ao verificar diret√≥rios:', error.message);
        }

        // Teste 10: Configurar thresholds
        console.log('‚öôÔ∏è Teste 10: Configurar thresholds');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const newThresholds = {
                cpu: 85,
                memory: 90,
                disk: 95
            };
            
            const result = monitoringService.setThresholds(newThresholds);
            
            if (result && result.cpu === 85) {
                console.log('   ‚úÖ Thresholds configurados com sucesso');
                console.log('   üìä CPU:', result.cpu, '%');
                console.log('   üíæ Mem√≥ria:', result.memory, '%');
                console.log('   üíø Disco:', result.disk, '%');
                testesPassaram++;
            } else {
                console.log('   ‚ùå Falha ao configurar thresholds');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao configurar thresholds:', error.message);
        }

        // Teste 11: Parar monitoramento
        console.log('‚è∏Ô∏è Teste 11: Parar monitoramento');
        totalTestes++;
        
        try {
            const monitoringService = require('./services/monitoringService');
            const result = monitoringService.stopMonitoring();
            
            if (result && result.success) {
                console.log('   ‚úÖ Monitoramento parado com sucesso');
                console.log('   üìã Resultado:', result.message);
                testesPassaram++;
            } else {
                console.log('   ‚ùå Falha ao parar monitoramento');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao parar monitoramento:', error.message);
        }

        // Teste 12: Verificar persist√™ncia de dados
        console.log('üíæ Teste 12: Verificar persist√™ncia de dados');
        totalTestes++;
        
        try {
            const metricsDir = path.join(__dirname, 'metrics');
            const files = fs.readdirSync(metricsDir);
            const metricsFiles = files.filter(f => f.startsWith('metrics-'));
            
            console.log('   ‚úÖ Persist√™ncia verificada');
            console.log('   üìä Arquivos de m√©tricas:', metricsFiles.length);
            
            if (metricsFiles.length > 0) {
                console.log('   üìÅ Arquivos encontrados:');
                metricsFiles.slice(0, 3).forEach(file => {
                    console.log(`      - ${file}`);
                });
                
                if (metricsFiles.length > 3) {
                    console.log(`      ... e mais ${metricsFiles.length - 3} arquivos`);
                }
            }
            
            testesPassaram++;
        } catch (error) {
            console.log('   ‚ùå Erro ao verificar persist√™ncia:', error.message);
        }

        console.log('');
        console.log('üìä ===== RESULTADO DO TESTE =====');
        console.log(`‚úÖ Testes Passaram: ${testesPassaram}/${totalTestes}`);
        console.log(`üìà Taxa de Sucesso: ${Math.round((testesPassaram / totalTestes) * 100)}%`);
        console.log('');

        if (testesPassaram === totalTestes) {
            console.log('üéâ TODOS OS TESTES PASSARAM!');
            console.log('‚úÖ Sistema de monitoramento implementado com sucesso');
            console.log('‚úÖ M√©tricas de sistema coletadas corretamente');
            console.log('‚úÖ Sistema de alertas funcionando');
            console.log('‚úÖ Verifica√ß√£o de sa√∫de operacional');
            console.log('‚úÖ Rotas de API configuradas');
            console.log('‚úÖ Persist√™ncia de dados funcionando');
            console.log('');
            console.log('üîß CONFIGURA√á√ïES PARA PRODU√á√ÉO:');
            console.log('1. Configurar canais de alerta (email, Slack, SMS)');
            console.log('2. Ajustar thresholds conforme necess√°rio');
            console.log('3. Configurar reten√ß√£o de m√©tricas');
            console.log('4. Ativar monitoramento autom√°tico');
            console.log('5. Configurar dashboard de visualiza√ß√£o');
            console.log('');
            console.log('üåü SISTEMA DE MONITORAMENTO PRONTO PARA PRODU√á√ÉO!');
        } else {
            console.log('‚ö†Ô∏è Alguns testes falharam');
            console.log('üîß Verifique as configura√ß√µes e depend√™ncias');
            console.log('üìã Revise os logs para mais detalhes');
        }

    } catch (error) {
        console.error('‚ùå Erro geral no teste:', error.message);
        console.error('Stack:', error.stack);
    }
}

// Executar testes
testarSistemaMonitoramento().catch(console.error);
