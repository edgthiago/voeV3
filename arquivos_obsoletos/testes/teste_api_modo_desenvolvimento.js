// Teste simplificado da API sem autentica√ß√£o (modo teste)
const axios = require('axios');

async function testeSimplificadoAPI() {
    console.log('üß™ TESTE SIMPLIFICADO DA API - MODO DESENVOLVIMENTO');
    console.log('‚ö†Ô∏è  Mecanismos de seguran√ßa desabilitados para testes');
    console.log('=' .repeat(60));

    const baseURL = 'http://localhost:5000/api';
    
    try {
        // 1. Testar health check
        console.log('\n1. üîç Testando health check...');
        const healthResponse = await axios.get(`${baseURL}/health`);
        console.log(`‚úÖ Status da API: OK`);

        // 2. Testar endpoint de informa√ß√µes
        console.log('\n2. üìä Verificando endpoints dispon√≠veis...');
        const infoResponse = await axios.get(`${baseURL}/info`);
        console.log(`üìã Endpoints encontrados:`);
        
        if (infoResponse.data.endpoints_disponiveis) {
            infoResponse.data.endpoints_disponiveis.forEach(endpoint => {
                console.log(`   ‚Ä¢ ${endpoint}`);
            });
        }

        // 3. Testar busca de coment√°rios do produto 1
        console.log('\n3. üí¨ Testando busca de coment√°rios (produto 1)...');
        try {
            const comentariosResponse = await axios.get(`${baseURL}/comentarios/produtos/1/comentarios`);
            console.log(`‚úÖ Coment√°rios encontrados: ${comentariosResponse.data.length || 0}`);
            
            if (comentariosResponse.data.length > 0) {
                comentariosResponse.data.slice(0, 3).forEach((comentario, index) => {
                    console.log(`   ${index + 1}. ${comentario.usuario_nome || 'Usu√°rio'} - ${comentario.avaliacao}/5`);
                    console.log(`      "${(comentario.comentario || '').substring(0, 50)}..."`);
                });
            }
        } catch (error) {
            console.log(`‚ùå Erro ao buscar coment√°rios: ${error.response?.status} - ${error.response?.data?.mensagem || error.message}`);
        }

        // 4. Testar produtos
        console.log('\n4. üì¶ Testando listagem de produtos...');
        try {
            const produtosResponse = await axios.get(`${baseURL}/produtos`);
            const produtos = produtosResponse.data;
            console.log(`‚úÖ Produtos encontrados: ${produtos.length || 0}`);
            
            if (produtos.length > 0) {
                produtos.slice(0, 3).forEach((produto, index) => {
                    console.log(`   ${index + 1}. ${produto.nome} - R$ ${produto.preco_atual}`);
                });
            }
        } catch (error) {
            console.log(`‚ùå Erro ao buscar produtos: ${error.response?.status} - ${error.response?.data?.mensagem || error.message}`);
        }

        // 5. Testar promo√ß√µes
        console.log('\n5. üè∑Ô∏è Testando promo√ß√µes...');
        try {
            const promocoesResponse = await axios.get(`${baseURL}/promocoes`);
            console.log(`‚úÖ Promo√ß√µes encontradas: ${promocoesResponse.data.length || 0}`);
        } catch (error) {
            console.log(`‚ùå Erro ao buscar promo√ß√µes: ${error.response?.status} - ${error.response?.data?.mensagem || error.message}`);
        }

        // 6. Testar dashboard admin (sem autentica√ß√£o no modo teste)
        console.log('\n6. üéõÔ∏è Testando dashboard admin...');
        try {
            const dashboardResponse = await axios.get(`${baseURL}/admin/dashboard`);
            console.log(`‚úÖ Dashboard acess√≠vel: ${dashboardResponse.status === 200 ? 'SIM' : 'N√ÉO'}`);
            
            if (dashboardResponse.data) {
                const stats = dashboardResponse.data;
                console.log(`üìä Estat√≠sticas do dashboard:`);
                if (stats.usuarios) console.log(`   ‚Ä¢ Usu√°rios: ${stats.usuarios.total || 'N/A'}`);
                if (stats.produtos) console.log(`   ‚Ä¢ Produtos: ${stats.produtos.total || 'N/A'}`);
                if (stats.pedidos) console.log(`   ‚Ä¢ Pedidos: ${stats.pedidos.total || 'N/A'}`);
            }
        } catch (error) {
            console.log(`‚ùå Erro no dashboard: ${error.response?.status} - ${error.response?.data?.mensagem || error.message}`);
        }

        // 7. Verifica√ß√£o manual do sistema de coment√°rios
        console.log('\n7. üîß Verifica√ß√£o manual do sistema...');
        
        // Simular verifica√ß√£o direta no banco
        const verificacaoManual = await verificarSistemaManual();
        console.log(`üìã Resultados da verifica√ß√£o manual:`);
        console.log(`   ‚Ä¢ Usu√°rios com pedidos confirmados: ${verificacaoManual.usuariosComPedidos}`);
        console.log(`   ‚Ä¢ Produtos mais comprados: ${verificacaoManual.produtosMaisComprados}`);
        console.log(`   ‚Ä¢ Coment√°rios com compra verificada: ${verificacaoManual.comentariosVerificados}`);

        console.log('\n' + '=' .repeat(60));
        console.log('üéâ TESTE SIMPLIFICADO CONCLU√çDO!');
        console.log('üìä Status geral do sistema: FUNCIONAL');
        console.log('‚ö†Ô∏è  Lembrete: Ativar seguran√ßa antes da produ√ß√£o');

    } catch (error) {
        console.error('‚ùå Erro geral durante teste:', error.message);
        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
        }
    }
}

async function verificarSistemaManual() {
    const mysql = require('mysql2/promise');
    
    try {
        const conexao = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '1234',
            database: 'projetofgt'
        });

        // Contar usu√°rios com pedidos confirmados
        const [usuarios] = await conexao.execute(`
            SELECT COUNT(DISTINCT usuario_id) as count 
            FROM pedidos_simples 
            WHERE status_pedido IN ('confirmado', 'preparando', 'enviado', 'entregue')
        `);

        // Produtos mais comprados
        const [produtos] = await conexao.execute(`
            SELECT COUNT(*) as count
            FROM pedidos_simples 
            WHERE status_pedido IN ('confirmado', 'preparando', 'enviado', 'entregue')
        `);

        // Coment√°rios verificados
        const [comentarios] = await conexao.execute(`
            SELECT COUNT(*) as count 
            FROM comentarios_produtos 
            WHERE compra_verificada = 1 AND ativo = 1
        `);

        await conexao.end();

        return {
            usuariosComPedidos: usuarios[0].count,
            produtosMaisComprados: produtos[0].count,
            comentariosVerificados: comentarios[0].count
        };

    } catch (error) {
        console.log(`‚ùå Erro na verifica√ß√£o manual: ${error.message}`);
        return {
            usuariosComPedidos: 'N/A',
            produtosMaisComprados: 'N/A',
            comentariosVerificados: 'N/A'
        };
    }
}

// Aguardar servidor estar pronto
setTimeout(testeSimplificadoAPI, 1000);
